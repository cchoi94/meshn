{"version":3,"file":"static/webpack/static/development/pages/book.js.14ca2e887d598305d706.hot-update.js","sources":["webpack:///./components/Modal.js","webpack:///./node_modules/react-calendar/dist/entry.js"],"sourcesContent":["import React from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport Calendar from 'react-calendar';\nimport DropDown from './SelectDropDown';\nimport * as moment from 'moment';\nimport '../styles/calendarModal.scss';\nimport Swal from 'sweetalert2'\n\nclass SimpleModal extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isDateSelected: false,\n      selectedDate: null,\n      selectedDateTimeSlots: [],\n      userSelectedTimeSlot: null\n    }\n  }\n\n  // onCalendarChange = (event) => {\n    // console.log(event)\n  // }\n\n  onDisableTile = ({date, view}) => {\n    let currentYear = date.getFullYear()\n    let currentMonth = date.getMonth()\n    let disabledDaysArray = []\n    let disabledDates = []\n    let convertedTimesArray = []\n\n    const numberOfdaysInMonth = new Date(currentYear, currentMonth, 0).getDate()\n\n    this.props.data.fields.availability.arrayValue.values.forEach(timeSlot => {\n      if(timeSlot.mapValue.fields.status.stringValue === 'closed') {\n        disabledDaysArray.push(parseInt(timeSlot.mapValue.fields.day_value.integerValue))\n      }\n    })\n\n    for (let i = 1; i <= numberOfdaysInMonth + 2; i++) {\n      if(disabledDaysArray.includes(new Date(currentYear, currentMonth, i).getDay())) {\n        disabledDates.push(new Date(currentYear, currentMonth, i))\n      }\n    }\n\n    this.props.bookedTimes.forEach(bookedTimes => {\n      convertedTimesArray.push(new Date (bookedTimes))\n        \n      disabledDates.concat(convertedTimesArray)\n    });\n\n    disabledDates = disabledDates.concat(convertedTimesArray)\n\n    return (view === 'month') && // Block day tiles only\n      disabledDates.some(disabledDate =>\n        date.getFullYear() === disabledDate.getFullYear() &&\n        date.getMonth() === disabledDate.getMonth() &&\n        date.getDate() === disabledDate.getDate()\n    )\n  }\n\n  onCalendarDateClick = (day) => {\n    const selectedDateTimeSlots = []\n    this.setState({\n      isDateSelected: true,\n      selectedDate: day,\n      selectedDateTimeSlots\n    })\n    this.props.data.fields.availability.arrayValue.values.forEach(timeSlot => {\n      if(parseInt(timeSlot.mapValue.fields.day_value.integerValue) === day.getDay()) {\n        selectedDateTimeSlots.push(\n          {startTime: moment(timeSlot.mapValue.fields.start_time.stringValue, 'HH:mm:ss').format('h:mm a'), \n          endTime: moment(timeSlot.mapValue.fields.end_time.stringValue, 'HH:mm:ss').format('h:mm a')}\n        )\n        this.setState({\n          selectedDateTimeSlots\n        })\n      }\n    })\n  }\n\n  onSelectedTimeslot = (selectedTime) => {\n    let convertedSelectedTime = {}\n\n    convertedSelectedTime.startTime = moment(selectedTime.startTime, 'HH:mm a').format('HH:mm:ss')\n\n    convertedSelectedTime.endTime = moment(selectedTime.endTime, 'HH:mm a').format('HH:mm:ss')\n\n    this.setState({\n      userSelectedTimeSlot: convertedSelectedTime\n    })\n  }\n\n  onHandleBookingSubmit = () => {\n    let postData = {}\n    let gymDocId = ''\n\n    let convertedDate = this.state.selectedDate.toString().slice(0,15)\n\n    let convertedStartTime = moment(this.state.userSelectedTimeSlot.startTime, 'HH:mm:ss').format('HH:mm a')\n\n    let convertedEndTime = moment(this.state.userSelectedTimeSlot.endTime, 'HH:mm:ss').format('HH:mm a')\n\n\n    if (this.state.userSelectedTimeSlot && this.state.selectedDate && this.props.user){\n      let decomposedNameArray = this.props.data.name.split('/')\n      \n      Swal.fire({\n      title: `Booking Confirmation`,\n      html: `Selected Day: ${convertedDate} </br> Selected Time ${convertedStartTime} - ${convertedEndTime}`,\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, Confirm it!',\n      className: 'swal'\n    }).then((result) => {\n      if (result.value) {\n        Swal.fire(\n          'Booked!',\n          'Your event has been scheduled',\n          'success'\n        )\n\n        gymDocId = decomposedNameArray.splice(decomposedNameArray.length - 1)[0]\n\n        postData.user_email = {stringValue: this.props.user.user_email};\n\n        postData.selected_start_time = {stringValue: this.state.userSelectedTimeSlot.startTime}\n\n        postData.selected_end_time = {stringValue: this.state.userSelectedTimeSlot.endTime}\n\n        postData.selected_date = {stringValue: this.state.selectedDate}\n\n        postData.modified = { stringValue: new Date()}\n\n        postData.gym_name = {stringValue: this.props.data.fields.name.stringValue}\n        \n        postData.gym_location = {stringValue: this.props.data.fields.location.stringValue}\n\n        postData.gym_id = {\n          stringValue: gymDocId\n        }\n        this.props.modalAction()\n\n        this.props.submitGymBooking(postData)\n      }\n    })\n\n    }\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"modalContainer\">\n        {this.props.type === 'booking' &&\n          <Modal\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n            open={this.props.modalState}\n            onClose={this.props.modalAction}\n            className=\"modalBox\"\n          >\n            <div className=\"modalContainer\">\n              {this.props.data &&\n                <div>\n                  <h2>Schedule with {this.props.data.fields.name.stringValue}</h2>\n                  <Calendar\n                    onChange={this.onCalendarChange}\n                    tileClassName={\"calTile\"}\n                    tileDisabled={this.onDisableTile}\n                    onClickDay={this.onCalendarDateClick}\n                  />\n                  {this.state.isDateSelected &&\n                    <div className='dropdown'>\n                      <DropDown\n                        data={this.state.selectedDateTimeSlots}\n                        type={'booking:timeslots'}\n                        onSelectedTimeslot={this.onSelectedTimeslot}\n                      />\n                    </div>\n                  }\n                </div>\n              }\n              {this.state.userSelectedTimeSlot &&\n                <Button onClick={this.onHandleBookingSubmit} fullWidth disabled={!this.state.userSelectedTimeSlot} variant=\"contained\" color=\"primary\">Book</Button>\n              }\n            </div>\n          </Modal>\n        }\n        {/* <Modal\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n          open={this.props.modalState}\n          onClose={this.props.modalAction}\n        >\n          <div className=\"modalContainer\">\n            This is a modal\n            <button onClick={test}>log this.props</button>\n          </div>\n        </Modal> */}\n      </div>\n    );\n\n  }\n}\n\nexport default SimpleModal","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Calendar\", {\n  enumerable: true,\n  get: function get() {\n    return _Calendar.default;\n  }\n});\nObject.defineProperty(exports, \"CenturyView\", {\n  enumerable: true,\n  get: function get() {\n    return _CenturyView.default;\n  }\n});\nObject.defineProperty(exports, \"DecadeView\", {\n  enumerable: true,\n  get: function get() {\n    return _DecadeView.default;\n  }\n});\nObject.defineProperty(exports, \"YearView\", {\n  enumerable: true,\n  get: function get() {\n    return _YearView.default;\n  }\n});\nObject.defineProperty(exports, \"MonthView\", {\n  enumerable: true,\n  get: function get() {\n    return _MonthView.default;\n  }\n});\nexports.default = void 0;\n\nvar _Calendar = _interopRequireDefault(require(\"./Calendar\"));\n\nvar _CenturyView = _interopRequireDefault(require(\"./CenturyView\"));\n\nvar _DecadeView = _interopRequireDefault(require(\"./DecadeView\"));\n\nvar _YearView = _interopRequireDefault(require(\"./YearView\"));\n\nvar _MonthView = _interopRequireDefault(require(\"./MonthView\"));\n\nrequire(\"./Calendar.css\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// File is created during build phase and placed in dist directory\n// eslint-disable-next-line import/no-unresolved\nvar _default = _Calendar.default;\nexports.default = _default;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAKA;AACA;AAlDA;AAoDA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAtEA;AAwEA;AAEA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AAlFA;AAoFA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAMA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AA7IA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AAGA;AACA;AACA;AACA;;;AAkIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;;;;AArMA;AACA;AAuMA;;;;;;;;;;;;ACjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;A","sourceRoot":""}