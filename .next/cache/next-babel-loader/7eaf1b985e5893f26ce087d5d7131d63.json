{"ast":null,"code":"import axios from '../../components/Requests/FirebaseInstance';\nexport var SET_GYMS = 'gyms:setGyms';\nexport var GYM_BOOKED = 'gym:gymBooked';\nexport var SHOW_ERROR = 'gyms:showError';\nexport var GYM_TIMES_BOOKED = 'gym:timesBooked';\nexport var USER_TIMES_BOOKED = 'user:timesBooked';\nexport var setGymData = function setGymData(gyms) {\n  return {\n    type: SET_GYMS,\n    payload: {\n      gyms: gyms\n    }\n  };\n};\nexport var bookGym = function bookGym(gym) {\n  return {\n    type: GYM_BOOKED,\n    payload: {\n      gym: gym\n    }\n  };\n};\nexport var showError = function showError() {\n  return {\n    type: SHOW_ERROR,\n    payload: {\n      error: 'Error when fetching gyms'\n    }\n  };\n};\nexport var setGymBookedTimes = function setGymBookedTimes(bookedTimes) {\n  return {\n    type: GYM_TIMES_BOOKED,\n    payload: {\n      bookedTimes: bookedTimes\n    }\n  };\n};\nexport var setUserBookedTimes = function setUserBookedTimes(bookedTimes) {\n  return {\n    type: USER_TIMES_BOOKED,\n    payload: {\n      bookedTimes: bookedTimes\n    }\n  };\n};\nexport var submitGymBooking = function submitGymBooking(postData) {\n  return function (dispatch) {\n    axios.post('/booked_logs', {\n      fields: postData\n    }).then(function (response) {}, function (error) {\n      console.log(error);\n    });\n  };\n};\nexport var getBookedTimes = function getBookedTimes(ref, type) {\n  return function (dispatch) {\n    axios.get('/booked_logs').then(function (response) {\n      var bookedDaysArray = [];\n\n      if (response.data.documents) {\n        if (type === 'gym') {\n          response.data.documents.forEach(function (bookedTimes) {\n            if (bookedTimes.fields.gym_id.stringValue === ref) {\n              bookedDaysArray.push(bookedTimes.fields.selected_date.stringValue);\n            }\n          });\n          dispatch(setGymBookedTimes(bookedDaysArray));\n        } else if (type === 'user') {\n          response.data.documents.forEach(function (bookedTimes) {\n            if (bookedTimes.fields.user_email.stringValue === ref) {\n              bookedDaysArray.push({\n                day: bookedTimes.fields.selected_date.stringValue,\n                start_time: bookedTimes.fields.selected_start_time.stringValue,\n                end_time: bookedTimes.fields.selected_end_time.stringValue,\n                gym_name: bookedTimes.fields.gym_name.stringValue,\n                gym_location: bookedTimes.fields.gym_location.stringValue,\n                modified: bookedTimes.fields.modified.stringValue\n              });\n            }\n          });\n          dispatch(setUserBookedTimes(bookedDaysArray));\n        }\n      }\n    }, function (error) {\n      dispatch(showError());\n    });\n  };\n};\nexport var fetchGymsRequest = function fetchGymsRequest() {\n  return function (dispatch) {\n    axios.get('/gyms').then(function (response) {\n      dispatch(setGymData(response.data.documents));\n    }, function (error) {\n      dispatch(showError());\n    });\n  };\n};","map":{"version":3,"sources":["/Users/codychoi/Desktop/meshn/redux/actions/gym-actions.js"],"names":["axios","SET_GYMS","GYM_BOOKED","SHOW_ERROR","GYM_TIMES_BOOKED","USER_TIMES_BOOKED","setGymData","gyms","type","payload","bookGym","gym","showError","error","setGymBookedTimes","bookedTimes","setUserBookedTimes","submitGymBooking","postData","dispatch","post","fields","then","response","console","log","getBookedTimes","ref","get","bookedDaysArray","data","documents","forEach","gym_id","stringValue","push","selected_date","user_email","day","start_time","selected_start_time","end_time","selected_end_time","gym_name","gym_location","modified","fetchGymsRequest"],"mappings":"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","sourcesContent":["import axios from '../../components/Requests/FirebaseInstance'\nexport const SET_GYMS = 'gyms:setGyms'\nexport const GYM_BOOKED = 'gym:gymBooked'\nexport const SHOW_ERROR = 'gyms:showError'\nexport const GYM_TIMES_BOOKED = 'gym:timesBooked'\nexport const USER_TIMES_BOOKED = 'user:timesBooked'\n\nexport const setGymData = (gyms) => {\n  return {\n    type: SET_GYMS,\n    payload: {\n      gyms: gyms\n    }\n  }\n}\n\nexport const bookGym = (gym) => {\n  return {\n    type: GYM_BOOKED,\n    payload: {\n      gym: gym\n    }\n  }\n}\n\nexport const showError = () => {\n  return {\n    type: SHOW_ERROR,\n    payload: {\n      error: 'Error when fetching gyms'\n    }\n  }\n}\n\nexport const setGymBookedTimes = (bookedTimes) => {\n  return {\n    type: GYM_TIMES_BOOKED,\n    payload: {\n      bookedTimes\n    }\n  }\n}\n\nexport const setUserBookedTimes = (bookedTimes) => {\n  return {\n    type: USER_TIMES_BOOKED,\n    payload: {\n      bookedTimes\n    }\n  }\n}\n\nexport const submitGymBooking = (postData) => {\n  return dispatch => {\n    axios.post('/booked_logs',\n    {\n      fields: \n        postData\n    } \n    ).then(response => {\n    }, error => {\n      console.log(error)\n    })\n  }\n}\n\nexport const getBookedTimes = (ref, type) => {\n  return dispatch => {\n    axios.get('/booked_logs').then(response => {\n      let bookedDaysArray = []\n      if (response.data.documents) {\n        if (type === 'gym') {\n          response.data.documents.forEach(bookedTimes => {\n            if (bookedTimes.fields.gym_id.stringValue === ref) {\n              bookedDaysArray.push(bookedTimes.fields.selected_date.stringValue)\n            }\n          })\n          dispatch(setGymBookedTimes(bookedDaysArray))\n        } else if (type === 'user') {\n          response.data.documents.forEach(bookedTimes => {\n            if (bookedTimes.fields.user_email.stringValue === ref) {\n              bookedDaysArray.push({\n                day: bookedTimes.fields.selected_date.stringValue,\n                start_time: bookedTimes.fields.selected_start_time.stringValue,\n                end_time: bookedTimes.fields.selected_end_time.stringValue,\n                gym_name: bookedTimes.fields.gym_name.stringValue,\n                gym_location: bookedTimes.fields.gym_location.stringValue,\n                modified: bookedTimes.fields.modified.stringValue\n              })\n            }\n          })\n            dispatch(setUserBookedTimes(bookedDaysArray))\n        }\n      }\n    }, error => {\n      dispatch(showError())\n    })\n  }\n}\n\nexport const fetchGymsRequest = () => {\n  return dispatch => {\n    axios.get('/gyms').then(response => {\n      dispatch(setGymData(response.data.documents))\n    }, error => {\n      dispatch(showError())\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}