{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport Calendar from 'react-calendar/dist/entry.nostyle';\nimport DropDown from './SelectDropDown';\nimport * as moment from 'moment';\nimport '../styles/calendarModal.scss';\nimport Swal from 'sweetalert2';\n\nvar SimpleModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SimpleModal, _React$Component);\n\n  function SimpleModal(props) {\n    var _this;\n\n    _classCallCheck(this, SimpleModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SimpleModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onDisableTile\", function (_ref) {\n      var date = _ref.date,\n          view = _ref.view;\n      var currentYear = date.getFullYear();\n      var currentMonth = date.getMonth();\n      var disabledDaysArray = [];\n      var disabledDates = [];\n      var convertedTimesArray = [];\n      var numberOfdaysInMonth = new Date(currentYear, currentMonth, 0).getDate();\n\n      _this.props.data.fields.availability.arrayValue.values.forEach(function (timeSlot) {\n        if (timeSlot.mapValue.fields.status.stringValue === 'closed') {\n          disabledDaysArray.push(_parseInt(timeSlot.mapValue.fields.day_value.integerValue));\n        }\n      });\n\n      for (var i = 1; i <= numberOfdaysInMonth + 2; i++) {\n        if (disabledDaysArray.includes(new Date(currentYear, currentMonth, i).getDay())) {\n          disabledDates.push(new Date(currentYear, currentMonth, i));\n        }\n      }\n\n      _this.props.bookedTimes.forEach(function (bookedTimes) {\n        convertedTimesArray.push(new Date(bookedTimes));\n        disabledDates.concat(convertedTimesArray);\n      });\n\n      disabledDates = disabledDates.concat(convertedTimesArray);\n      return view === 'month' && // Block day tiles only\n      disabledDates.some(function (disabledDate) {\n        return date.getFullYear() === disabledDate.getFullYear() && date.getMonth() === disabledDate.getMonth() && date.getDate() === disabledDate.getDate();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCalendarDateClick\", function (day) {\n      var selectedDateTimeSlots = [];\n\n      _this.setState({\n        isDateSelected: true,\n        selectedDate: day,\n        selectedDateTimeSlots: selectedDateTimeSlots\n      });\n\n      _this.props.data.fields.availability.arrayValue.values.forEach(function (timeSlot) {\n        if (_parseInt(timeSlot.mapValue.fields.day_value.integerValue) === day.getDay()) {\n          selectedDateTimeSlots.push({\n            startTime: moment(timeSlot.mapValue.fields.start_time.stringValue, 'HH:mm:ss').format('h:mm a'),\n            endTime: moment(timeSlot.mapValue.fields.end_time.stringValue, 'HH:mm:ss').format('h:mm a')\n          });\n\n          _this.setState({\n            selectedDateTimeSlots: selectedDateTimeSlots\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectedTimeslot\", function (selectedTime) {\n      var convertedSelectedTime = {};\n      convertedSelectedTime.startTime = moment(selectedTime.startTime, 'HH:mm a').format('HH:mm:ss');\n      convertedSelectedTime.endTime = moment(selectedTime.endTime, 'HH:mm a').format('HH:mm:ss');\n\n      _this.setState({\n        userSelectedTimeSlot: convertedSelectedTime\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleBookingSubmit\", function () {\n      var postData = {};\n      var gymDocId = '';\n\n      var convertedDate = _this.state.selectedDate.toString().slice(0, 15);\n\n      var convertedStartTime = moment(_this.state.userSelectedTimeSlot.startTime, 'HH:mm:ss').format('HH:mm a');\n      var convertedEndTime = moment(_this.state.userSelectedTimeSlot.endTime, 'HH:mm:ss').format('HH:mm a');\n\n      if (_this.state.userSelectedTimeSlot && _this.state.selectedDate && _this.props.user) {\n        var decomposedNameArray = _this.props.data.name.split('/');\n\n        Swal.fire({\n          title: \"Booking Confirmation\",\n          html: \"Selected Day: \".concat(convertedDate, \" </br> Selected Time \").concat(convertedStartTime, \" - \").concat(convertedEndTime),\n          type: 'warning',\n          showCancelButton: true,\n          confirmButtonColor: '#3085d6',\n          cancelButtonColor: '#d33',\n          confirmButtonText: 'Yes, Confirm it!',\n          className: 'swal'\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire('Booked!', 'Your event has been scheduled', 'success');\n            gymDocId = decomposedNameArray.splice(decomposedNameArray.length - 1)[0];\n            postData.user_email = {\n              stringValue: _this.props.user.user_email\n            };\n            postData.selected_start_time = {\n              stringValue: _this.state.userSelectedTimeSlot.startTime\n            };\n            postData.selected_end_time = {\n              stringValue: _this.state.userSelectedTimeSlot.endTime\n            };\n            postData.selected_date = {\n              stringValue: _this.state.selectedDate\n            };\n            postData.modified = {\n              stringValue: new Date()\n            };\n            postData.gym_name = {\n              stringValue: _this.props.data.fields.name.stringValue\n            };\n            postData.gym_location = {\n              stringValue: _this.props.data.fields.location.stringValue\n            };\n            postData.gym_id = {\n              stringValue: gymDocId\n            };\n\n            _this.props.modalAction();\n\n            _this.props.submitGymBooking(postData);\n          }\n        });\n      }\n    });\n\n    _this.state = {\n      isDateSelected: false,\n      selectedDate: null,\n      selectedDateTimeSlots: [],\n      userSelectedTimeSlot: null\n    };\n    return _this;\n  } // onCalendarChange = (event) => {\n  // console.log(event)\n  // }\n\n\n  _createClass(SimpleModal, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"modalContainer\"\n      }, this.props.type === 'booking' && React.createElement(Modal, {\n        \"aria-labelledby\": \"simple-modal-title\",\n        \"aria-describedby\": \"simple-modal-description\",\n        open: this.props.modalState,\n        onClose: this.props.modalAction,\n        className: \"modalBox\"\n      }, React.createElement(\"div\", {\n        className: \"modalContainer\"\n      }, this.props.data && React.createElement(\"div\", null, React.createElement(\"h2\", null, \"Schedule with \", this.props.data.fields.name.stringValue), React.createElement(Calendar, {\n        onChange: this.onCalendarChange,\n        tileClassName: \"calTile\",\n        tileDisabled: this.onDisableTile,\n        onClickDay: this.onCalendarDateClick\n      }), this.state.isDateSelected && React.createElement(\"div\", {\n        className: \"dropdown\"\n      }, React.createElement(DropDown, {\n        data: this.state.selectedDateTimeSlots,\n        type: 'booking:timeslots',\n        onSelectedTimeslot: this.onSelectedTimeslot\n      }))), this.state.userSelectedTimeSlot && React.createElement(Button, {\n        onClick: this.onHandleBookingSubmit,\n        fullWidth: true,\n        disabled: !this.state.userSelectedTimeSlot,\n        variant: \"contained\",\n        color: \"primary\"\n      }, \"Book\"))));\n    }\n  }]);\n\n  return SimpleModal;\n}(React.Component);\n\nexport default SimpleModal;","map":null,"metadata":{},"sourceType":"module"}