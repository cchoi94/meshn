{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/codychoi/Desktop/meshn/components/Modal.js\";\nimport React from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport Calendar from 'react-calendar';\nimport DropDown from './SelectDropDown';\nimport * as moment from 'moment';\nimport '../styles/calendarModal.scss';\nimport Swal from 'sweetalert2';\n\nvar SimpleModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SimpleModal, _React$Component);\n\n  function SimpleModal(props) {\n    var _this;\n\n    _classCallCheck(this, SimpleModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SimpleModal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onDisableTile\", function (_ref) {\n      var date = _ref.date,\n          view = _ref.view;\n      var currentYear = date.getFullYear();\n      var currentMonth = date.getMonth();\n      var disabledDaysArray = [];\n      var disabledDates = [];\n      var convertedTimesArray = [];\n      var numberOfdaysInMonth = new Date(currentYear, currentMonth, 0).getDate();\n\n      _this.props.data.fields.availability.arrayValue.values.forEach(function (timeSlot) {\n        if (timeSlot.mapValue.fields.status.stringValue === 'closed') {\n          disabledDaysArray.push(_parseInt(timeSlot.mapValue.fields.day_value.integerValue));\n        }\n      });\n\n      for (var i = 1; i <= numberOfdaysInMonth + 2; i++) {\n        if (disabledDaysArray.includes(new Date(currentYear, currentMonth, i).getDay())) {\n          disabledDates.push(new Date(currentYear, currentMonth, i));\n        }\n      }\n\n      _this.props.bookedTimes.forEach(function (bookedTimes) {\n        convertedTimesArray.push(new Date(bookedTimes));\n        disabledDates.concat(convertedTimesArray);\n      });\n\n      disabledDates = disabledDates.concat(convertedTimesArray);\n      return view === 'month' && // Block day tiles only\n      disabledDates.some(function (disabledDate) {\n        return date.getFullYear() === disabledDate.getFullYear() && date.getMonth() === disabledDate.getMonth() && date.getDate() === disabledDate.getDate();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCalendarDateClick\", function (day) {\n      var selectedDateTimeSlots = [];\n\n      _this.setState({\n        isDateSelected: true,\n        selectedDate: day,\n        selectedDateTimeSlots: selectedDateTimeSlots\n      });\n\n      _this.props.data.fields.availability.arrayValue.values.forEach(function (timeSlot) {\n        if (_parseInt(timeSlot.mapValue.fields.day_value.integerValue) === day.getDay()) {\n          selectedDateTimeSlots.push({\n            startTime: moment(timeSlot.mapValue.fields.start_time.stringValue, 'HH:mm:ss').format('h:mm a'),\n            endTime: moment(timeSlot.mapValue.fields.end_time.stringValue, 'HH:mm:ss').format('h:mm a')\n          });\n\n          _this.setState({\n            selectedDateTimeSlots: selectedDateTimeSlots\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectedTimeslot\", function (selectedTime) {\n      var convertedSelectedTime = {};\n      convertedSelectedTime.startTime = moment(selectedTime.startTime, 'HH:mm a').format('HH:mm:ss');\n      convertedSelectedTime.endTime = moment(selectedTime.endTime, 'HH:mm a').format('HH:mm:ss');\n\n      _this.setState({\n        userSelectedTimeSlot: convertedSelectedTime\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onHandleBookingSubmit\", function () {\n      var postData = {};\n      var gymDocId = '';\n\n      var convertedDate = _this.state.selectedDate.toString().slice(0, 15);\n\n      var convertedStartTime = moment(_this.state.userSelectedTimeSlot.startTime, 'HH:mm:ss').format('HH:mm a');\n      var convertedEndTime = moment(_this.state.userSelectedTimeSlot.endTime, 'HH:mm:ss').format('HH:mm a');\n\n      if (_this.state.userSelectedTimeSlot && _this.state.selectedDate && _this.props.user) {\n        var decomposedNameArray = _this.props.data.name.split('/');\n\n        Swal.fire({\n          title: \"Booking Confirmation\",\n          html: \"Selected Day: \".concat(convertedDate, \" </br> Selected Time \").concat(convertedStartTime, \" - \").concat(convertedEndTime),\n          type: 'warning',\n          showCancelButton: true,\n          confirmButtonColor: '#3085d6',\n          cancelButtonColor: '#d33',\n          confirmButtonText: 'Yes, Confirm it!',\n          className: 'swal'\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire('Booked!', 'Your event has been scheduled', 'success');\n            gymDocId = decomposedNameArray.splice(decomposedNameArray.length - 1)[0];\n            postData.user_email = {\n              stringValue: _this.props.user.user_email\n            };\n            postData.selected_start_time = {\n              stringValue: _this.state.userSelectedTimeSlot.startTime\n            };\n            postData.selected_end_time = {\n              stringValue: _this.state.userSelectedTimeSlot.endTime\n            };\n            postData.selected_date = {\n              stringValue: _this.state.selectedDate\n            };\n            postData.modified = {\n              stringValue: new Date()\n            };\n            postData.gym_name = {\n              stringValue: _this.props.data.fields.name.stringValue\n            };\n            postData.gym_location = {\n              stringValue: _this.props.data.fields.location.stringValue\n            };\n            postData.gym_id = {\n              stringValue: gymDocId\n            };\n\n            _this.props.modalAction();\n\n            _this.props.submitGymBooking(postData);\n          }\n        });\n      }\n    });\n\n    _this.state = {\n      isDateSelected: false,\n      selectedDate: null,\n      selectedDateTimeSlots: [],\n      userSelectedTimeSlot: null\n    };\n    return _this;\n  } // onCalendarChange = (event) => {\n  // console.log(event)\n  // }\n\n\n  _createClass(SimpleModal, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"modalContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, this.props.type === 'booking' && React.createElement(Modal, {\n        \"aria-labelledby\": \"simple-modal-title\",\n        \"aria-describedby\": \"simple-modal-description\",\n        open: this.props.modalState,\n        onClose: this.props.modalAction,\n        className: \"modalBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modalContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, this.props.data && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Schedule with \", this.props.data.fields.name.stringValue), React.createElement(Calendar, {\n        onChange: this.onCalendarChange,\n        tileClassName: \"calTile\",\n        tileDisabled: this.onDisableTile,\n        onClickDay: this.onCalendarDateClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), this.state.isDateSelected && React.createElement(\"div\", {\n        className: \"dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(DropDown, {\n        data: this.state.selectedDateTimeSlots,\n        type: 'booking:timeslots',\n        onSelectedTimeslot: this.onSelectedTimeslot,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }))), this.state.userSelectedTimeSlot && React.createElement(Button, {\n        onClick: this.onHandleBookingSubmit,\n        fullWidth: true,\n        disabled: !this.state.userSelectedTimeSlot,\n        variant: \"contained\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Book\"))));\n    }\n  }]);\n\n  return SimpleModal;\n}(React.Component);\n\nexport default SimpleModal;","map":{"version":3,"sources":["/Users/codychoi/Desktop/meshn/components/Modal.js"],"names":["React","Modal","Button","Calendar","DropDown","moment","Swal","SimpleModal","props","date","view","currentYear","getFullYear","currentMonth","getMonth","disabledDaysArray","disabledDates","convertedTimesArray","numberOfdaysInMonth","Date","getDate","data","fields","availability","arrayValue","values","forEach","timeSlot","mapValue","status","stringValue","push","day_value","integerValue","i","includes","getDay","bookedTimes","concat","some","disabledDate","day","selectedDateTimeSlots","setState","isDateSelected","selectedDate","startTime","start_time","format","endTime","end_time","selectedTime","convertedSelectedTime","userSelectedTimeSlot","postData","gymDocId","convertedDate","state","toString","slice","convertedStartTime","convertedEndTime","user","decomposedNameArray","name","split","fire","title","html","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","className","then","result","value","splice","length","user_email","selected_start_time","selected_end_time","selected_date","modified","gym_name","gym_location","location","gym_id","modalAction","submitGymBooking","modalState","onCalendarChange","onDisableTile","onCalendarDateClick","onSelectedTimeslot","onHandleBookingSubmit","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport Calendar from 'react-calendar';\nimport DropDown from './SelectDropDown';\nimport * as moment from 'moment';\nimport '../styles/calendarModal.scss';\nimport Swal from 'sweetalert2'\n\nclass SimpleModal extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isDateSelected: false,\n      selectedDate: null,\n      selectedDateTimeSlots: [],\n      userSelectedTimeSlot: null\n    }\n  }\n\n  // onCalendarChange = (event) => {\n    // console.log(event)\n  // }\n\n  onDisableTile = ({date, view}) => {\n    let currentYear = date.getFullYear()\n    let currentMonth = date.getMonth()\n    let disabledDaysArray = []\n    let disabledDates = []\n    let convertedTimesArray = []\n\n    const numberOfdaysInMonth = new Date(currentYear, currentMonth, 0).getDate()\n\n    this.props.data.fields.availability.arrayValue.values.forEach(timeSlot => {\n      if(timeSlot.mapValue.fields.status.stringValue === 'closed') {\n        disabledDaysArray.push(parseInt(timeSlot.mapValue.fields.day_value.integerValue))\n      }\n    })\n\n    for (let i = 1; i <= numberOfdaysInMonth + 2; i++) {\n      if(disabledDaysArray.includes(new Date(currentYear, currentMonth, i).getDay())) {\n        disabledDates.push(new Date(currentYear, currentMonth, i))\n      }\n    }\n\n    this.props.bookedTimes.forEach(bookedTimes => {\n      convertedTimesArray.push(new Date (bookedTimes))\n        \n      disabledDates.concat(convertedTimesArray)\n    });\n\n    disabledDates = disabledDates.concat(convertedTimesArray)\n\n    return (view === 'month') && // Block day tiles only\n      disabledDates.some(disabledDate =>\n        date.getFullYear() === disabledDate.getFullYear() &&\n        date.getMonth() === disabledDate.getMonth() &&\n        date.getDate() === disabledDate.getDate()\n    )\n  }\n\n  onCalendarDateClick = (day) => {\n    const selectedDateTimeSlots = []\n    this.setState({\n      isDateSelected: true,\n      selectedDate: day,\n      selectedDateTimeSlots\n    })\n    this.props.data.fields.availability.arrayValue.values.forEach(timeSlot => {\n      if(parseInt(timeSlot.mapValue.fields.day_value.integerValue) === day.getDay()) {\n        selectedDateTimeSlots.push(\n          {startTime: moment(timeSlot.mapValue.fields.start_time.stringValue, 'HH:mm:ss').format('h:mm a'), \n          endTime: moment(timeSlot.mapValue.fields.end_time.stringValue, 'HH:mm:ss').format('h:mm a')}\n        )\n        this.setState({\n          selectedDateTimeSlots\n        })\n      }\n    })\n  }\n\n  onSelectedTimeslot = (selectedTime) => {\n    let convertedSelectedTime = {}\n\n    convertedSelectedTime.startTime = moment(selectedTime.startTime, 'HH:mm a').format('HH:mm:ss')\n\n    convertedSelectedTime.endTime = moment(selectedTime.endTime, 'HH:mm a').format('HH:mm:ss')\n\n    this.setState({\n      userSelectedTimeSlot: convertedSelectedTime\n    })\n  }\n\n  onHandleBookingSubmit = () => {\n    let postData = {}\n    let gymDocId = ''\n\n    let convertedDate = this.state.selectedDate.toString().slice(0,15)\n\n    let convertedStartTime = moment(this.state.userSelectedTimeSlot.startTime, 'HH:mm:ss').format('HH:mm a')\n\n    let convertedEndTime = moment(this.state.userSelectedTimeSlot.endTime, 'HH:mm:ss').format('HH:mm a')\n\n\n    if (this.state.userSelectedTimeSlot && this.state.selectedDate && this.props.user){\n      let decomposedNameArray = this.props.data.name.split('/')\n      \n      Swal.fire({\n      title: `Booking Confirmation`,\n      html: `Selected Day: ${convertedDate} </br> Selected Time ${convertedStartTime} - ${convertedEndTime}`,\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, Confirm it!',\n      className: 'swal'\n    }).then((result) => {\n      if (result.value) {\n        Swal.fire(\n          'Booked!',\n          'Your event has been scheduled',\n          'success'\n        )\n\n        gymDocId = decomposedNameArray.splice(decomposedNameArray.length - 1)[0]\n\n        postData.user_email = {stringValue: this.props.user.user_email};\n\n        postData.selected_start_time = {stringValue: this.state.userSelectedTimeSlot.startTime}\n\n        postData.selected_end_time = {stringValue: this.state.userSelectedTimeSlot.endTime}\n\n        postData.selected_date = {stringValue: this.state.selectedDate}\n\n        postData.modified = { stringValue: new Date()}\n\n        postData.gym_name = {stringValue: this.props.data.fields.name.stringValue}\n        \n        postData.gym_location = {stringValue: this.props.data.fields.location.stringValue}\n\n        postData.gym_id = {\n          stringValue: gymDocId\n        }\n        this.props.modalAction()\n\n        this.props.submitGymBooking(postData)\n      }\n    })\n\n    }\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"modalContainer\">\n        {this.props.type === 'booking' &&\n          <Modal\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n            open={this.props.modalState}\n            onClose={this.props.modalAction}\n            className=\"modalBox\"\n          >\n            <div className=\"modalContainer\">\n              {this.props.data &&\n                <div>\n                  <h2>Schedule with {this.props.data.fields.name.stringValue}</h2>\n                  <Calendar\n                    onChange={this.onCalendarChange}\n                    tileClassName={\"calTile\"}\n                    tileDisabled={this.onDisableTile}\n                    onClickDay={this.onCalendarDateClick}\n                  />\n                  {this.state.isDateSelected &&\n                    <div className='dropdown'>\n                      <DropDown\n                        data={this.state.selectedDateTimeSlots}\n                        type={'booking:timeslots'}\n                        onSelectedTimeslot={this.onSelectedTimeslot}\n                      />\n                    </div>\n                  }\n                </div>\n              }\n              {this.state.userSelectedTimeSlot &&\n                <Button onClick={this.onHandleBookingSubmit} fullWidth disabled={!this.state.userSelectedTimeSlot} variant=\"contained\" color=\"primary\">Book</Button>\n              }\n            </div>\n          </Modal>\n        }\n        {/* <Modal\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n          open={this.props.modalState}\n          onClose={this.props.modalAction}\n        >\n          <div className=\"modalContainer\">\n            This is a modal\n            <button onClick={test}>log this.props</button>\n          </div>\n        </Modal> */}\n      </div>\n    );\n\n  }\n}\n\nexport default SimpleModal"]},"metadata":{},"sourceType":"module"}